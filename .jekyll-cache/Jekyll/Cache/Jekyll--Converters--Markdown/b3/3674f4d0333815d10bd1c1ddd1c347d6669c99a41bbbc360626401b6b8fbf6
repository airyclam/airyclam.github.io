I"	<p><img class="ui medium right floated rounded image" src="../images/plane.jpg" /></p>

<p>This is an implementation of a flight reservation system I made for ICS 211. The user navigates through a text-based menu to perform a variety of tasks such as:</p>
<ul>
  <li>Create a new passenger</li>
  <li>Edit information for an existing passenger</li>
  <li>Display all passenger information based on name</li>
  <li>Display all passenger information based on number of segments flown</li>
  <li>Book a reservation
    <ul>
      <li>If there’s no seats available on the flight, add the passenger to the waitlist</li>
    </ul>
  </li>
  <li>Cancel a reservation
    <ul>
      <li>If there’s a waitlist, add passengers in order of the waitlist</li>
    </ul>
  </li>
  <li>Display all flights with flight details</li>
</ul>

<p>In this project I gained experience working with various kinds of data structures and implementing them in a practical setting. The most challenging part for me was figuring out how to structure the waitlist. I envisioned one big priority queue with all the names reserving a flight so that removing one name would move the others up, but I wasn’t sure exactly how to separate the top 5 as the passengers and the rest as the waitlist. I ended up making a for loop in the main class as shown below.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Prints out Passenger List and Waitlist
for(int i = 0; i &lt; flightMap.get(flightNumber).getSize(); i++) { 
    if (i&lt;5) {
        System.out.println("Passenger"+ Integer.sum(i,1) + ". " + flightMap.get(flightNumber).output(i));
    } else {
        System.out.println("Waitlist"+ Integer.sum(i,-4) + ". " + flightMap.get(flightNumber).output(i));
    }
</code></pre></div></div>
<p>Having the for loop in the main class ensures that the passenger and waitlist are up-to-date when called. One disadvantage of this setup is that if I wanted to call all the names in the waitlist, I would need to make an extra 5 iterations before get access to the first name of the waitlist. A better data structure for this problem would have been a self-balancing binary search tree. 
Source: <a href="https://github.com/airyclam/FlightSystem"><i class="large github icon"></i>airyclam/FlightSystem</a></p>
:ET